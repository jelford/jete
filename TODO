# definite todos

## core

- replace lines: Vec<String> -> a cow structure like a rope
  - should work with file mmapped
- offload "write" to be external from state
  - done: wait for COW text structure

## core text editing

- Typing helpers
  - magic braces
  - snippets
- navigation:
  - skip whole page
  - skip to top / bottom of doc
  - skip to end of line
  - arrows for nav (incl. in text mode)
  - jump to line
- selection
- cut, copy, paste
  - kill ring
- work / line operations
  - delete word, delete line etc

## editor interface
- commands into list of commands
- command history
- search mode
- multi-cursor
- LSP
  - suggestions
  - goto definition
  - docs window
- Goto symbol (requires index)
- opening multiple files / multi-buffer

## display

- line wrap
  - lines that go on past edge of screen
- line numbers unhack
- highlighting
  - language syntax highlighting
    - Done: async highlighting off-thread
    - Todo: multi-language highlighting
    - Todo: incremental / faster highlighting
  - bug: status line getting left-over hightlighting
  - bracket matching


# maybe features

- core text data structure
  - should maintain plugable system for state from various modules?
    e.g. syntax highlighting
    ... in order to aide incremental recompute
    ... vs. just keep it simple and have that plugable state in the
    form of "fields"
- autosaving
  - maybe better implemented via user scripting?
    where's the boundary there?
- user scripting
  - lua is natural choice here
  - timers
  - internal commands into script namespace

